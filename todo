#!/bin/bash

config_file="todo_config"
if [ ! -f "$config_file" ]; then
  config_file=$HOME"/.todo/"$config_file
  if [ ! -f "$config_file" ]; then
    echo "Config file does not exist: $config_file"
    exit
  fi
fi
source $config_file
issues=("$issues_dir")
all=""

set_project_issues_dir() {
  mapfile -t issues < <(find . -name "$issues_dir" -type d -printf "%h/%f\n" | grep "$1" | sort | sed -e "s/^\.\///g")
  issues_dir=${issues[0]}
}

print_time() {
  date "+$1 %F %T"
}

######
# help
######
if [ $1 = 'help' ]; then
  if [ ! -z "$2" ]; then
    command="$2"
    if [ $command = 'add' ]; then
      echo "add [-p <project>] | [-t <priority>] | [-s <status>] | [-i <id>] | <title>"
    fi
    if [ $command = 'do' ] || [ $command = 'util' ]; then
      echo "$command [[-p <project>] | [-all]] <name> <command line>"
    fi
  else
    printf "help\ntime\nadd\nlist/find\ndo/util\ncomment\n"
  fi
  exit
fi

######
# time
######
if [ $1 = 'time' ]; then
  if [ ! -z "$2" ]; then user="$2"; fi
  print_time "$user"
  exit
fi

#####
# add
#####
if [ $1 = 'add' ]; then
  title=""
  priority="B"
  status=""
  suffix="md"
  
  if [ -f "$seq_file" ]; then
    id="$(head -n 1 $seq_file)"
    if [ ! -z "$use_seq_prefix" ]; then
      echo "$id" | awk '/^.*$/ {print substr($0,1,1) substr($0,2) + 1}' > "$seq_file"
    else
      echo "$id" | awk '/^.*$/ {print substr($0,1) + 1}' > "$seq_file"
    fi
  else
    id="${user}_$(date +%s)"
  fi
  
  shift;
  while test $# -gt 0
  do
    if [[ "$1" == \-* ]]; then
      if [ "$1" = '-t' ]; then
        priority="$2"
        shift;
      fi
    
      if [ "$1" = '-s' ]; then
        status="$2"
        shift;
      fi
        
      if [ "$1" = '-i' ]; then
        id="$2"
        shift;
      fi
        
      if [ "$1" = '-p' ]; then
        set_project_issues_dir "$2"
        shift;
      fi
    else
      title="$1"
    fi
    shift;
  done
  
  if [ ! -z "$status" ]; then
    issues_dir="$issues_dir/$status"
  fi
  echo "add $issues_dir/$priority.$id.$title.$suffix"
  touch "$issues_dir/$priority.$id.$title.$suffix"
  exit
fi

###########
# list/find
###########
if [ $1 = 'list' ] || [ $1 = 'find' ]; then
  project=""
  status=""
  name=""
  
  if [ $1 = 'find' ]; then
    print_format="%h/%f\n"
  else
    print_format="%h\t%f\n"
  fi  
  
  shift;
  while test $# -gt 0
  do
    if [[ "$1" == \-* ]]; then
      if [ "$1" = '-p' ]; then
        project="$2"
        shift;
      fi
      
      if [ "$1" = '-all' ]; then
        all="true"
      fi
      
      if [ "$1" = '-s' ]; then
        status="$2"
        shift;
      fi
      
      if [ "$1" = '-f' ]; then
        print_format="$2"
        shift;
      fi
    else
      name="$1"
    fi
    shift;
  done
  
  if [ ! -z "$all" ] || [ ! -z "$project"  ]; then
    set_project_issues_dir "$project"
  fi
  #issues=("${issues[@]/%/\/$status}")
  
  pathes=()
  for var in "${issues[@]}"
  do
    path="${var}/$status"
    if [ -d "$path" ]; then
      pathes+=("$path")
    fi
  done
  
  if [ ! -z "$pathes" ]; then
    find "${pathes[@]}" -name "*$name*" -type f -printf "$print_format" | sort
  fi
  exit
fi

#########
# do/util
#########
if [ $1 = 'do' ] || [ $1 = 'util' ]; then
  name=""
  project=""
  
  shift;
  while test $# -gt 0
  do
    if [[ "$1" == \-* ]]; then
      if [ "$1" = '-p' ]; then
        project="$2"
        shift;
      fi
      
      if [ "$1" = '-all' ]; then
        all="true"
      fi
    else
      if [ -z "$name" ]; then
        name="$1"
      else
        break
      fi
    fi
    shift;
  done
  
  issue=""
  util="$1"
  shift;
  
  if [ ! -z $util ]; then
    
    if [ ! -z "$all" ] || [ ! -z "$project"  ]; then
      set_project_issues_dir "$project"
    fi
    
    mapfile -t issues < <(find "${issues[@]}" -name "*$name*" -type f -printf "%h/%f\n" | sort)
    issue=${issues[0]}
  fi
  
  if [ ! -z "$util" ] && [ ! -z "$issue" ]; then
    $util $@ "$issue"
  fi
  exit
fi

#########
# comment
#########
if [ $1 = 'comment' ]; then
  execute=""
  name=""
  message=""
  header="# $(print_time "$user")"

  shift;
  while test $# -gt 0
  do
    if [[ "$1" == \-* ]]; then
      if [ "$1" = '-p' ]; then
        project="$2"
        shift;
      fi

      if [ "$1" = '-m' ]; then
        message="$2\n"
        shift;
      fi
      
      if [ "$1" = '-e' ]; then
        execute="$2"
        shift;
      fi
      
      if [ "$1" = '-all' ]; then
        all="true"
      fi
    else
      name="$1"
    fi
    shift;
  done
  
  if [ ! -z "$all" ] || [ ! -z "$project"  ]; then
    set_project_issues_dir "$project"
  fi
  
  mapfile -t issues < <(find "${issues[@]}" -name "*$name*" -type f -printf "%h/%f\n" | sort)
  issue=${issues[0]}
  
  if [ ! -z "$issue" ]; then
    printf "\n$header\n\n$message" >> "$issue"
    if [ ! -z "$execute" ]; then
      $execute "$issue"
    fi  
  fi
  exit
fi

####
# tj
####
if [ $1 = 'tj' ]; then
  pattern_user="$user"
  print_mode=""
  project=""
  status=""
  name=""
  tag=""
  from="0000-01-01"
  to="$(date "+%F")"
  
  shift;
  while test $# -gt 0
  do
    if [[ "$1" == \-* ]]; then
      if [ "$1" = '-p' ]; then
        project="$2"
        shift;
      fi
      
      if [ "$1" = '-all' ]; then
        all="true"
      fi
      
      if [ "$1" = '-s' ]; then
        status="$2"
        shift;
      fi
      
      if [ "$1" = '-print' ]; then
        print_mode="$2"
        shift;
      fi
      
      if [ "$1" = '-from' ]; then
        from="$2"
        shift;
      fi
      
      if [ "$1" = '-to' ]; then
        to="$2"
        shift;
      fi
      
      if [ "$1" = '-tag' ]; then
        tag="$2"
        shift;
      fi
      
      if [ "$1" = '-user' ]; then
        pattern_user="$2"
        shift;
      fi
    else
      name="$1"
    fi
    shift;
  done
  
  from=$(date -d "$from" +%s)
  to=$(date -d "$to" +%s)
  
  if [ ! -z "$all" ] || [ ! -z "$project"  ]; then
    set_project_issues_dir "$project"
  fi
  
  pathes=()
  for var in "${issues[@]}"
  do
    path="${var}/$status"
    if [ -d "$path" ]; then
      pathes+=("$path")
    fi
  done
  
  if [ ! -z "$pathes" ]; then
    mapfile -t issues < <(find "${pathes[@]}" -name "*$name*" -type f -printf "%h/%f\n")
    time=0
    for issue in "${issues[@]}"
    do
      issue_time=0
      issue_printed=""
      issue_need_print=""
      cur_date=""
      comment=()
      while read line
      do        
        if [[ $line =~ ^#[[:space:]]"$pattern_user"[[:space:]][0-9]{4}-[0-9]{2}-[0-9]{2}[[:space:]][0-9]{2}:[0-9]{2}:[0-9]{2} ]]; then
          cur_date="$(echo $line | awk '{print $3}')"
          cur_date=$(date -d "$cur_date" +%s)
          header=$line
          comment=()
        else
          if [[ $line =~ ^#[[:space:]].*[[:space:]][0-9]{4}-[0-9]{2}-[0-9]{2}[[:space:]][0-9]{2}:[0-9]{2}:[0-9]{2} ]]; then
            cur_date=""
            header=""
            if [[ ! -z "$issue_need_print" ]] && [[ "$print_mode" == *"c"* ]] && [ ! -z "$comment" ]; then
              printf '%s\n' "${comment[@]}"
            fi
            comment=()
          fi
        fi

        if [ ! -z "$cur_date" ] && [[ $line =~ ^\[[[:space:]]*"time":[[:space:]]*([0-9\.]*) ]]; then
          if [ $cur_date -ge $from ] && [ $cur_date -le $to ]; then
            if [ -z "$tag" ] || [[ $line =~ ^\[[[:space:]]*"time":[[:space:]]*([0-9\.]*).*[[:space:]]"$tag".* ]]; then
              time=$(echo "$time ${BASH_REMATCH[1]}" | awk '{print $1+$2}')
              issue_time=$(echo "$issue_time ${BASH_REMATCH[1]}" | awk '{print $1+$2}')
              
              if [[ "$print_mode" == *"i"* ]] && [[ -z "$issue_printed" ]]; then
                if [ "$print_mode" = "i" ]; then
                  echo "$issue"
                else
                  printf "\n%s\n" "$issue"
                fi
                issue_printed="true"
              fi
              if [[ "$print_mode" == *"h"* ]] && [[ "$print_mode" != *"c"* ]]; then
                echo "$header"
              fi
              if [[ "$print_mode" == *"l"* ]] && [[ "$print_mode" != *"c"* ]]; then
                echo "$line"
              fi
              issue_need_print="true"
            fi
          fi
        fi
        comment+=("$line")
      done <"$issue"
      
      if [[ ! -z "$issue_need_print" ]] && [[ "$print_mode" == *"c"* ]] && [ ! -z "$comment" ]; then
        printf '%s\n' "${comment[@]}"
      fi
      if [[ ! -z "$issue_need_print" ]] && [[ "$print_mode" == *"t"* ]] && [ ! -z "$issue_time" ]; then
       echo "$issue_time"
      fi
    done
    echo $time
  fi
  exit
fi

#########
# search
#########
if [ $1 = 'search' ]; then
  project=""
  status=""
  name=""
  print_path=""
  
  shift;
  while test $# -gt 0
  do
    if [[ "$1" == \-* ]]; then
      if [ "$1" = '-p' ]; then
        project="$2"
        shift;
      fi
      
      if [ "$1" = '-all' ]; then
        all="true"
      fi
      
      if [ "$1" = '-path' ]; then
        print_path="true"
      fi
      
      if [ "$1" = '-path-only' ]; then
        print_path="only"
      fi
      
      if [ "$1" = '-s' ]; then
        status="$2"
        shift;
      fi
    else
      if [ -z "$name" ]; then
        name="$1"
      else
        break
      fi
    fi
    shift;
  done

  if [ ! -z "$all" ] || [ ! -z "$project"  ]; then
    set_project_issues_dir "$project"
  fi
  
  pathes=()
  for var in "${issues[@]}"
  do
    path="${var}/$status"
    if [ -d "$path" ]; then
      pathes+=("$path")
    fi
  done
  
  if [ ! -z "$pathes" ]; then
    mapfile -t issues < <(find "${pathes[@]}" -name "*$name*" -type f -printf "%h/%f\n")
    patterns=($@)
    for issue in "${issues[@]}"
    do
      path_printed=""
      while read line
      do
        for var in "${patterns[@]}"
        do
          if [[ $line =~ $var ]]; then
            if [ -z "$path_printed" ] && [ ! -z "$print_path" ]; then
              echo "$issue"
              path_printed="$issue"
            fi
            if [ "$print_path" = "only" ]; then
              break 2
            fi
            echo $line
          fi
        done
      done <"$issue"
    
    done
  fi
  exit
fi

#####
# git
#####
if [ $1 = 'git' ]; then
  shift;
  params=$(printf '%s ' "$@";)
# see https://coderwall.com/p/grmruq/git-status-on-all-repos-in-folder
  find . -name ".git" -type d -printf "%h\n" -exec sh -c "(cd {}/.. && git $params&& echo)" \;
  exit
fi